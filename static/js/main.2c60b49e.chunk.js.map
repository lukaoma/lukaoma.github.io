{"version":3,"sources":["assets/images/appSlide/Featured.png","assets/images/appSlide/local.png","assets/images/appSlide/Splash.png","icon.png","pages/NavBar.tsx","pages/ShowCase.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","images","original","splash","thumbnail","feat","local","ShowCase","items","App","url","icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,0PC+B5BC,EA5BA,WACd,OACC,6BACC,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACzB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,SACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBACnB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACd,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,sBAChC,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,kBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,oBAGF,kBAACY,EAAA,EAAD,CAAMC,QAAM,GACX,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASV,UAAU,YACxD,kBAACW,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,e,oECjBAC,EAAkC,CACvC,CACCC,SAAUC,IACVC,UAAWD,KAEZ,CACCD,SAAUG,IACVD,UAAWC,KAEZ,CACCH,SAAUI,IACVF,UAAWE,MAYEC,EARE,WAChB,OACC,yBAAKnB,UAAU,aACd,kBAAC,IAAD,CAAcoB,MAAOP,MCNTQ,MAXf,WAEI,OACI,yBAAKrB,UAAU,OACX,kBAAC,IAAD,CAASsB,IAAKC,MACd,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCDQC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCVRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD+HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c60b49e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Featured.2e0b2471.png\";","module.exports = __webpack_public_path__ + \"static/media/local.f8c1e65b.png\";","module.exports = __webpack_public_path__ + \"static/media/Splash.d20479fe.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.e2c25871.png\";","import React                                                 from 'react';\nimport {Button, Form, FormControl, Nav, Navbar, NavDropdown} from 'react-bootstrap';\n\nconst NavBar = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t\t<Navbar.Brand href=\"#home\">Larry</Navbar.Brand>\n\t\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t<Nav.Link href=\"#home\">Home</Nav.Link>\n\t\t\t\t\t\t<Nav.Link href=\"#link\">Link</Nav.Link>\n\t\t\t\t\t\t<NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n\t\t\t\t\t\t\t<NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n\t\t\t\t\t\t\t<NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n\t\t\t\t\t\t\t<NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n\t\t\t\t\t\t\t<NavDropdown.Divider/>\n\t\t\t\t\t\t\t<NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t</Nav>\n\t\t\t\t\t<Form inline>\n\t\t\t\t\t\t<FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\n\t\t\t\t\t\t<Button variant=\"outline-success\">Search</Button>\n\t\t\t\t\t</Form>\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Navbar>\n\t\t</div>\n\t);\n};\n\nexport default NavBar;\n\n","import React                                 from 'react';\nimport ImageGallery, {ReactImageGalleryItem} from 'react-image-gallery';\nimport feat                                  from '../assets/images/appSlide/Featured.png';\nimport local                                 from '../assets/images/appSlide/local.png';\nimport splash                                from '../assets/images/appSlide/Splash.png';\n\nconst images: ReactImageGalleryItem[] = [\n\t{\n\t\toriginal: splash,\n\t\tthumbnail: splash,\n\t},\n\t{\n\t\toriginal: feat,\n\t\tthumbnail: feat,\n\t},\n\t{\n\t\toriginal: local,\n\t\tthumbnail: local,\n\t},\n];\n\nconst ShowCase = () => {\n\treturn (\n\t\t<div className=\"slideShow\">\n\t\t\t<ImageGallery items={images}/>\n\t\t</div>\n\t);\n};\n\nexport default ShowCase;\n","import React    from 'react';\nimport Favicon  from 'react-favicon';\nimport './App.css';\nimport icon     from './icon.png';\nimport NavBar   from './pages/NavBar';\nimport ShowCase from './pages/ShowCase';\n\nfunction App() {\n\n    return (\n        <div className=\"box\">\n            <Favicon url={icon}/>\n            <NavBar/>\n            <ShowCase/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport App                from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}